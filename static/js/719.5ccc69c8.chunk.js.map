{"version":3,"file":"static/js/719.5ccc69c8.chunk.js","mappings":"6OAEMA,EAAOC,EAAAA,EAAAA,KAAH,4KAWJC,EAAQD,EAAAA,EAAAA,MAAH,kEAKLE,EAAQF,EAAAA,EAAAA,MAAH,kNAaLG,EAASH,EAAAA,EAAAA,OAAH,2V,mBC1BCI,EAAa,WACxB,IAAMC,GAAaC,EAAAA,EAAAA,MACbC,GAAUD,EAAAA,EAAAA,MACVE,GAAaF,EAAAA,EAAAA,MAEbG,GAAWC,EAAAA,EAAAA,MAiBjB,OACE,UAACX,EAAD,CAAMY,SAhBa,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAOF,EAAEG,cAEfN,GACEO,EAAAA,EAAAA,IAAO,CACLC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,MAAON,EAAKI,SAASE,MAAMD,MAC3BE,SAAUP,EAAKI,SAASG,SAASF,SAGrCL,EAAKQ,OACN,EAG+BC,aAAa,MAA3C,WACE,SAACtB,EAAD,CAAOuB,QAASnB,EAAhB,SAA4B,cAC5B,SAACH,EAAD,CAAOuB,KAAK,OAAOR,KAAK,OAAOS,GAAIrB,KAEnC,SAACJ,EAAD,CAAOuB,QAASjB,EAAhB,SAAyB,WACzB,SAACL,EAAD,CAAOuB,KAAK,QAAQR,KAAK,QAAQS,GAAInB,KAErC,SAACN,EAAD,CAAOuB,QAAShB,EAAhB,SAA4B,cAC5B,SAACN,EAAD,CAAOuB,KAAK,WAAWR,KAAK,WAAWS,GAAIlB,KAE3C,SAACL,EAAD,CAAQsB,KAAK,SAAb,SAAsB,cAG3B,ECnCD,EAJiB,WACf,OAAO,SAACrB,EAAD,GACR,C,wDCHM,IAkBIE,EAAS,eAACqB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACL,EAAIM,GAWvD,OAREN,IAFFM,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/SignupForm/SignupForm.styled.jsx","components/SignupForm/SignupForm.jsx","pages/Register.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  max-width: 400px;\n  margin-top: 28px;\n  margin-right: auto;\n  margin-left: auto;\n\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n`;\n\nconst Label = styled.label`\n  font-size: 20px;\n  line-height: 24px;\n`;\n\nconst Input = styled.input`\n  padding-top: 16px;\n  padding-bottom: 16px;\n  padding-left: 16px;\n\n  font-size: 16px;\n  line-height: 20px;\n\n  outline: none;\n  border-radius: 16px;\n  border: 1px solid black;\n`;\n\nconst Button = styled.button`\n  max-width: 200px;\n\n  margin: 0 auto;\n  padding: 16px 32px;\n\n  color: black;\n  background-color: transparent;\n  border-radius: 16px;\n  border: 1px solid black;\n\n  transition: color 250ms ease-out, background-color 250ms ease-out;\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: black;\n  }\n`;\n\nexport { Form, Label, Input, Button };\n","import { useDispatch } from 'react-redux';\nimport { signUp } from 'redux/auth/operations';\nimport { Button, Form, Input, Label } from './SignupForm.styled';\nimport { nanoid } from 'nanoid';\n\nexport const SignupForm = () => {\n  const usernameId = nanoid();\n  const emailId = nanoid();\n  const passwordId = nanoid();\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n\n    dispatch(\n      signUp({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit} autoComplete=\"off\">\n      <Label htmlFor={usernameId}>Username</Label>\n      <Input type=\"text\" name=\"name\" id={usernameId} />\n\n      <Label htmlFor={emailId}>Email</Label>\n      <Input type=\"email\" name=\"email\" id={emailId} />\n\n      <Label htmlFor={passwordId}>Password</Label>\n      <Input type=\"password\" name=\"password\" id={passwordId} />\n\n      <Button type=\"submit\">Sign Up</Button>\n    </Form>\n  );\n};\n","import { SignupForm } from 'components/SignupForm/SignupForm';\n\nconst Register = () => {\n  return <SignupForm />;\n};\n\nexport default Register;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Form","styled","Label","Input","Button","SignupForm","usernameId","nanoid","emailId","passwordId","dispatch","useDispatch","onSubmit","e","preventDefault","form","currentTarget","signUp","name","elements","value","email","password","reset","autoComplete","htmlFor","type","id","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}