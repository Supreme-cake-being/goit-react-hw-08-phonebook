{"version":3,"file":"static/js/138.f10c3800.chunk.js","mappings":"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","sources":["components/ContactEditor/ContactEditor.styled.jsx","redux/contacts/selectors.js","hooks/useContacts.js","components/ContactEditor/ContactEditor.jsx","redux/filter/selectors.js","components/ContactsList/ContactsList.styled.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactsList/ContactsList.jsx","pages/Contacts.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  margin-top: 28px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 24px;\n`;\n\nconst Label = styled.label`\n  font-size: 20px;\n  line-height: 24px;\n`;\n\nconst Input = styled.input`\n  padding-top: 16px;\n  padding-bottom: 16px;\n  padding-left: 16px;\n\n  font-size: 16px;\n  line-height: 20px;\n\n  outline: none;\n  border-radius: 16px;\n  border: 1px solid black;\n`;\n\nconst Button = styled.button`\n  padding: 8px 16px;\n\n  color: black;\n  background-color: transparent;\n  border-radius: 8px;\n  border: 1px solid black;\n\n  transition: color 250ms ease-out, background-color 250ms ease-out;\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: black;\n  }\n`;\n\nexport { Form, Label, Input, Button };\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectError = state => state.contacts.error;\n","import { useSelector } from 'react-redux';\nimport { selectContacts, selectError } from 'redux/contacts/selectors';\n\nexport const useContacts = () => {\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n\n  return {\n    contacts,\n    error,\n  };\n};\n","import { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { Form, Label, Input, Button } from './ContactEditor.styled';\nimport { addContact } from 'redux/contacts/operations';\nimport { useContacts } from 'hooks/useContacts';\n\nconst ContactEditor = () => {\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const { contacts } = useContacts();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [contacts]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.target;\n\n    setIsLoading(true);\n    const isInContacts = contacts.find(\n      ({ name }) => name.toLowerCase() === form.name.value.toLowerCase()\n    );\n\n    if (isInContacts) return alert(`${form.name.value} is already in contacts`);\n\n    dispatch(\n      addContact({\n        id: nanoid(),\n        name: form.name.value,\n        number: form.number.value,\n      })\n    );\n\n    e.target.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label htmlFor={nameId}>Name</Label>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        id={nameId}\n      />\n\n      <Label htmlFor={numberId}>Number</Label>\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        id={numberId}\n      />\n\n      <Button type=\"submit\">{isLoading ? `Adding...` : `Add contact`}</Button>\n    </Form>\n  );\n};\n\nexport default ContactEditor;\n","export const selectFilter = state => state.filter;\n","import styled from '@emotion/styled';\n\nconst List = styled.ul`\n  margin-top: 24px;\n  padding: 0 200px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst Item = styled.li`\n  padding-bottom: 16px;\n\n  display: flex;\n  align-items: center;\n  gap: 32px;\n\n  border-bottom: 1px solid black;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst Button = styled.button`\n  padding: 8px 16px;\n  margin-left: auto;\n\n  color: black;\n  background-color: transparent;\n  border-radius: 8px;\n  border: 1px solid black;\n\n  transition: color 250ms ease-out, background-color 250ms ease-out;\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: black;\n  }\n`;\n\nconst EmptyContacts = styled.p`\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nexport { List, Item, Button, EmptyContacts };\n","import styled from '@emotion/styled';\n\nconst Item = styled.li`\n  padding-bottom: 16px;\n\n  display: flex;\n  align-items: center;\n  gap: 32px;\n\n  border-bottom: 1px solid black;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst Button = styled.button`\n  padding: 8px 16px;\n  margin-left: auto;\n\n  color: black;\n  background-color: transparent;\n  border-radius: 8px;\n  border: 1px solid black;\n\n  transition: color 250ms ease-out, background-color 250ms ease-out;\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: black;\n  }\n`;\n\nexport { Item, Button };\n","import { useState } from 'react';\nimport { Item, Button } from './Contact.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClick = id => {\n    dispatch(deleteContact(id));\n    setIsLoading(true);\n  };\n\n  return (\n    <Item>\n      <p>{name}</p>\n      <p>{number}</p>\n      <Button type=\"button\" onClick={() => handleClick(id)}>\n        {isLoading ? `Deleting...` : `Delete`}\n      </Button>\n    </Item>\n  );\n};\n","import styled from '@emotion/styled';\n\nconst Label = styled.label`\n  margin-bottom: 24px;\n\n  display: block;\n\n  font-size: 16px;\n  line-height: 20px;\n`;\n\nconst Input = styled.input`\n  margin-top: 8px;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 8px;\n\n  display: block;\n\n  font-size: 12px;\n  line-height: 16px;\n\n  outline: none;\n  border-radius: 16px;\n  border: 1px solid black;\n`;\n\nexport { Label, Input };\n","import { Label, Input } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/filter/slice';\nimport { selectFilter } from 'redux/filter/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(selectFilter) ?? '';\n\n  const handleChange = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleChange}\n        value={filter}\n      ></Input>\n    </Label>\n  );\n};\n\nexport default Filter;\n","import { useContacts } from 'hooks/useContacts';\nimport { useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { List, EmptyContacts } from './ContactsList.styled';\nimport { Contact } from 'components/Contact/Contact';\nimport Filter from 'components/Filter/Filter';\n\nconst ContactsList = () => {\n  const { contacts, error } = useContacts();\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter)\n  );\n\n  const shouldShowContacts = contacts.length !== 0;\n  const shouldShowFilteredContatcs = filteredContacts.length !== 0;\n  const shouldShowEmptyContactsMessage =\n    shouldShowContacts || shouldShowFilteredContatcs;\n\n  return (\n    <>\n      {/* {error && <p>{error}</p>} */}\n      {shouldShowContacts ? (\n        <List>\n          <h1>Your Contacts</h1>\n          <Filter />\n          {shouldShowFilteredContatcs &&\n            filteredContacts.map(({ id, name, number }) => (\n              <Contact key={id} id={id} name={name} number={number} />\n            ))}\n        </List>\n      ) : (\n        error && <p>{error}</p>\n      )}\n      {!shouldShowEmptyContactsMessage && (\n        <EmptyContacts>There are no contacts :(</EmptyContacts>\n      )}\n    </>\n  );\n};\n\nexport default ContactsList;\n","import { useEffect } from 'react';\n\nimport ContactEditor from 'components/ContactEditor/ContactEditor';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactEditor />\n      <ContactsList />\n    </>\n  );\n};\n\nexport default Contacts;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Form","styled","Label","Input","Button","selectContacts","state","contacts","items","selectError","error","useContacts","useSelector","nameId","nanoid","numberId","useState","isLoading","setIsLoading","dispatch","useDispatch","useEffect","onSubmit","e","preventDefault","form","target","find","name","toLowerCase","value","alert","addContact","id","number","reset","htmlFor","type","pattern","title","required","selectFilter","filter","List","EmptyContacts","Item","Contact","onClick","deleteContact","handleClick","onChange","filterContacts","filteredContacts","includes","shouldShowContacts","length","shouldShowFilteredContatcs","shouldShowEmptyContactsMessage","map","fetchContacts","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}